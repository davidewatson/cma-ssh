// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Swagger statically implements the virtual filesystem provided to vfsgen.
var Swagger = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/api.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "api.swagger.json",
			modTime:          time.Time{},
			uncompressedSize: 19368,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6f\xe3\x36\x12\x7f\xcf\x5f\x31\xd0\x1d\x70\x77\xc0\x6e\xb2\xed\xbd\x14\x79\xb9\x0b\x9c\x74\x6b\x74\xf3\x81\x38\xdb\x7d\xb8\x2e\x0c\x5a\x1a\xcb\x6c\x24\x52\x25\x29\xe7\x8c\xc3\xfe\xef\x87\xa1\x24\x8b\xfa\xb4\x6c\x6f\x12\xbb\xdb\xbe\x74\x2d\x91\xc3\xf9\xf8\x71\x38\x33\x1c\xe5\x7f\x27\x00\x9e\x7e\x62\x61\x88\xca\x3b\x07\xef\xfb\xd3\x77\xde\x1b\x7a\xc6\xc5\x5c\x7a\xe7\x40\xef\x01\x3c\xc3\x4d\x84\xf4\x7e\x14\xa5\xda\xa0\x82\x6b\x26\x58\x88\x0a\x2e\xee\xc6\x30\x99\xfc\x04\x89\x92\x4b\x1e\xa0\xb2\x93\x01\xbc\x25\x2a\xcd\xa5\xa0\x29\xcb\x77\xa7\xdf\xe5\x54\x01\x3c\x5f\x0a\xc3\x7c\xb3\x26\x0d\xe0\x09\x16\x5b\xda\x13\x16\xeb\x54\x84\x30\xba\x19\x3d\xe4\xc3\x01\xbc\x54\x45\xf4\x72\x61\x4c\xa2\xcf\xcf\xce\x42\x6e\x16\xe9\xec\xd4\x97\xf1\x99\xce\xc6\xbf\xf5\x85\x6f\xce\xfc\x98\xbd\xd5\x7a\x51\xce\xc3\x98\x71\x3b\x33\x1f\x76\xea\x47\x32\x0d\x04\x33\x7c\x89\xff\x0e\xe9\x25\x11\xf1\xec\xf0\x2f\x27\x00\x5f\xac\xd8\xda\x5f\x60\x8c\xda\x3b\x87\xff\x64\xfc\xda\x75\x0b\xe6\xe9\x07\xcd\xf8\x6c\xc7\xfa\x52\xe8\xb4\x32\x98\x25\x49\xc4\x7d\x66\xb8\x14\x67\xbf\x69\x29\xca\xb1\x89\x92\x41\xea\x0f\x1c\xcb\xcc\x42\x97\xba\x3f\x63\x09\x3f\x5b\x7e\x77\xe6\x67\xaa\x77\x35\x17\xa2\xab\x48\x62\x3f\x8d\x63\xa6\x56\x24\xf6\x27\x1e\x45\xa0\xd0\x28\x8e\x4b\x04\xb3\x40\xd0\x86\x99\x54\x83\x9c\x03\x83\x9c\x18\x30\x11\x00\x37\x1a\x1e\xd3\x19\xfa\x52\xcc\x79\x08\x73\xa9\xc0\x97\x42\xa0\x6f\xf8\x92\x9b\xd5\x5a\xa5\x00\x9e\x4c\x50\x59\x96\xc7\x01\xad\xf1\x1e\x4d\x0e\x08\x77\x90\x42\x9d\x48\xa1\x51\x57\x78\x03\xf0\xbe\x7f\xf7\xae\xf6\x08\xc0\x0b\x50\xfb\x8a\x27\x26\x47\xcb\x05\xe8\xd4\xf7\x51\xeb\x79\x4a\xec\x67\x94\x4e\x1d\xf2\x99\x9c\x64\x26\xd6\x20\x06\xe0\xfd\x55\xe1\x9c\xe8\xfc\xe5\x2c\xc0\x39\x17\x9c\xe8\x6a\x42\x87\xd6\x8b\x92\xdd\x7b\x4c\xa2\x95\x57\x99\xfb\xe5\xa4\xed\xdf\x5f\x1c\xb9\x12\xa6\x58\x8c\x06\x55\x69\xc5\xec\xbf\x9a\x44\x05\x9e\xed\xff\xdf\xf4\x4a\x7b\xc3\x62\x24\x83\x90\x79\x0a\x93\x18\x09\x33\x84\x48\xca\x47\x0c\x20\x4d\x1a\xb2\x73\x3b\xf3\xf7\x14\xd5\xaa\xfe\x4a\xe1\xef\x29\x57\x48\xb6\x99\xb3\x48\x63\xed\xb5\x59\x25\x96\x31\x6d\x14\x17\xa1\xd7\x2a\xf0\x67\x47\x60\xc3\xc2\xba\xa8\x85\x03\x28\x27\x7f\x3e\xa9\x69\xca\x0b\x30\x42\x83\xfd\xc0\xcc\xc6\x94\x40\xec\x01\xd9\xa5\x1d\x7a\x4c\x38\xab\x70\x7c\x28\x50\xfb\xb4\x60\x06\xb8\x76\xa1\xf6\x37\x0d\x34\x91\x10\x17\xa0\x36\x4a\xae\x8e\x0f\x6c\x89\xd4\x1b\x7c\xa0\x3d\x9a\xe8\x30\x1a\x84\xb6\x91\x42\x76\x5c\x68\xab\x70\xfc\x22\x68\x9b\xc9\xa0\x81\x86\x0c\x28\x6d\x6f\x1c\x9c\x18\x95\xd6\x61\xf2\x15\x64\xbe\xd6\xe1\x10\x89\x77\x07\xdb\x89\xa3\xb0\xfa\x71\x7c\x16\xf1\x0a\x00\xb7\x38\x93\x19\xd0\x5c\x72\xff\x39\x2d\x3d\xe8\xa8\xfd\x40\x0b\x1e\x03\x30\xab\x2c\xef\x84\xcc\xaf\x68\x27\x21\x03\xd4\x59\x08\xb4\x95\xb9\x42\x34\xeb\xa3\xd9\xd2\x28\xe2\x28\x8a\x93\x58\xe9\x5d\x30\x18\xe0\x5d\x4a\x95\xdc\x10\xa9\x49\xc6\xce\x71\x19\xd3\xe1\xfc\x45\xbc\x4d\xae\xd5\x9b\xed\x8e\x38\xe1\x44\x56\xa3\x32\xb2\xb2\x27\xd9\xd1\x9c\x72\xbd\x80\x4e\xa4\x8c\x5c\x24\x6f\x15\x76\x11\x92\x81\x28\xc0\x5c\xc9\x78\x6b\x1c\x67\x11\x0e\x21\xe1\x8e\xb8\x38\x06\x00\x57\x59\x3e\x60\xe4\x3a\x79\x40\x6e\xae\xb5\xb1\xf4\xcb\x20\xf7\xcd\x80\x80\x53\x06\x38\x25\x96\xa6\xf4\x44\x6f\xb3\x31\xd7\xc8\xb3\x33\x4b\x31\x9f\x41\x36\xa6\x14\x6b\x46\x2a\x06\xe3\x3a\x3a\x37\x68\xa4\xa6\x13\x9b\xfb\x47\x11\x25\xc8\x52\xfc\x28\x55\xcc\xe8\x0c\xf1\xe2\x34\x32\xfc\x15\x03\x5d\x16\x04\x8e\x76\x8d\xdc\x7a\x57\x5f\x04\xc1\x51\x6d\x69\x87\xdf\x6f\x24\xee\x75\x24\x7e\xf6\xa8\xb7\x44\x5e\xba\x01\x78\xda\x67\x51\x56\x62\x12\x69\x3c\x43\x45\xe7\x6e\xcc\xfc\x05\x17\xa8\x81\x8b\xea\x71\xb3\x43\xd4\x34\x21\xfa\x47\x85\xcc\x0a\xc7\xdf\x08\x36\x2b\x32\xbf\x6e\x4e\x96\x26\xa1\x62\x01\x6e\x9b\x96\xa5\x4a\x40\x3e\x15\xa4\xc5\x49\x11\xe5\x87\x7c\x89\x62\x58\x7c\xff\x31\x23\x90\x73\x3e\x16\x73\x7b\x3e\x10\xe6\x8e\x01\xb8\x7d\x02\x1c\x70\x25\x0b\x0c\x3d\x7b\x42\x60\x0a\xc1\x97\x42\xf3\x00\xe9\x10\xb7\xe6\xcb\x4d\x7a\x34\x51\xff\x70\xc7\xcb\x8c\xc1\x38\x31\x74\xd6\x17\xb8\x1d\x52\xe3\xaa\x5a\xf8\x28\x70\x59\x65\xf9\x1b\xf1\xa8\x55\xa1\x5f\xc7\xa5\x96\x17\x79\x5b\xbb\xd2\x7c\x2a\xf0\xd2\x85\x00\x9b\xc9\xd4\x00\x4b\x38\x68\x54\xcb\x4d\xbe\xf4\x97\x8c\xc2\x11\x3a\xd1\x9c\xf3\x17\x2b\x7a\xad\x2f\x30\x1d\x6e\xca\x2b\xc4\xee\xe2\xcd\x75\x16\xa6\x4d\x1a\x75\xb1\xc2\xc5\xc9\xd9\x6f\xe8\x97\xf5\x46\x2f\x51\x64\x26\xc3\x6b\x5a\xf7\x1e\x7f\xd0\x44\xbb\x41\x08\x5a\xfc\xe5\x9b\xca\xbb\xe2\x6a\x99\xa6\xc3\xe3\x0f\x45\x7d\xcd\x6b\xd5\xcd\xe3\x0f\xfa\x97\x06\x22\x87\xaf\xf1\x73\x3a\x43\x25\xd0\xa0\x86\x82\x4c\xeb\x32\x31\x63\x7a\xb2\xd2\x06\x63\x8b\xc5\xed\x17\xba\x66\x6c\x02\x56\x22\x6d\xc9\x4c\x79\xd0\xbd\xd2\x4f\x52\x9b\xdc\xeb\xec\xb3\xd2\xa2\x20\xd3\xb9\xd0\x9e\x16\xb2\x4b\xd9\x50\xbe\xcf\x44\xb4\xd0\xf8\xee\x22\x08\xd4\xee\x8b\x8c\xef\x80\x08\xa0\x76\xd7\x68\x9c\x8f\xeb\x39\x0f\xb5\xdb\xed\x3c\xf9\xf0\x2a\x1e\xad\xb6\x2b\x5b\x7c\xcb\x1e\xf0\x0f\xb9\x99\x36\x5d\xe5\x70\xa9\x49\x02\xc3\x42\x90\xc2\x86\x35\x21\x37\xa0\x30\x91\x9a\x1b\xa9\x56\xed\x7a\xa6\x25\x7d\x19\xc7\xdc\xec\xbc\xe2\x82\xe9\x45\x51\x24\xa5\x25\x73\x72\x9d\xcb\x19\x85\x38\x25\x45\xef\x06\xd5\x4f\x0b\x34\x0b\x4a\x0f\x15\x08\x69\xec\xaa\x44\x11\x9e\x98\x06\x3f\x42\x26\xe0\x69\x81\x02\x66\x29\x8f\x3a\x98\xa0\x57\xc1\x34\xd8\x95\x81\x4b\x66\x6c\x51\xd8\x92\xe9\x10\x53\xee\x65\xc7\x1c\x55\xb4\x48\x28\x21\xd5\x18\x50\x70\xe6\xcb\x38\xe1\x51\xc7\xc6\xcc\x5f\xee\xb6\x5b\x46\xf9\x64\xbb\x54\x3b\xfd\x24\x62\x86\x30\xbe\x13\xfd\xbb\x7c\x32\x70\x93\x99\x29\x5b\x2f\xb0\x81\xf5\x19\xa8\x54\x08\x0a\xb3\x2b\x7e\xb4\x35\x9e\x68\xad\x5f\xec\xb1\xe1\xdc\xda\xea\x6e\x58\x6c\xad\xb8\x56\x6a\x68\x1a\x8c\x6c\xd7\xe9\x93\x54\x8f\xa8\xa6\xeb\x2a\x68\xa7\x3f\x6d\x56\x20\x3b\xea\x8f\xbd\x01\x45\x71\x4a\x27\xe8\x77\x16\x6a\x6b\xa2\x5d\x17\xf5\x97\x5c\x28\x23\x5d\x51\xb7\xb6\x56\x16\xc8\xec\x61\x2f\xf9\xd8\xa5\xa2\x99\x94\xb4\xf7\xab\x4a\x9a\xaf\xab\xaa\xad\xaf\xfb\x5c\x4a\x59\x6b\x22\xc0\xba\x95\xa6\xd9\x0a\xcc\x82\x6b\xa0\x58\x1d\xb5\x19\xa6\x84\x3c\x70\xba\x44\xc3\x78\x34\x36\x18\xef\xa3\x85\x9d\x4f\xf9\x96\x46\xa1\x76\x64\x66\xc7\xe0\x34\x46\xad\x59\xb8\xdb\x5a\x17\x41\x60\xd1\xc7\xa2\x96\xd0\xbd\xda\x48\xb6\x91\x9d\xb2\xaf\x6c\xef\x5d\xea\xb4\xa8\x59\x97\x6a\x3b\xd4\xba\x71\xdd\xd0\x49\x9d\x81\xde\xfe\x82\x8c\x5c\xe3\x7e\xb6\x3b\xe8\xd8\x7a\x73\x15\xf5\x95\x3f\x11\xb5\x1d\xa2\x0e\xd9\x98\xdd\x69\x54\x4d\x3d\x1e\x8a\x34\xae\xe4\x78\xde\xe4\xe1\xe2\xe1\xe3\x64\xfa\xf1\x66\x72\x77\x35\x1a\xff\x38\xbe\xba\x74\x73\xdd\xbb\xfb\xdb\x5f\xc6\x93\xf1\xed\xcd\xf8\xe6\xbd\xfb\xfc\xfe\xe3\x4d\xe3\xd1\xd5\xe8\xf6\x66\x34\xfe\x50\x7b\x3c\x79\xb8\xbd\xbb\xab\x3d\xbb\xba\xbf\xbf\xbd\x77\x1f\x5c\x5e\xbd\xbf\xbf\xb8\xbc\xba\x2c\xa4\x5e\x17\x13\x28\xaf\x64\x69\x64\x3d\x72\x0f\xa7\xa5\x42\xdf\x42\x73\xd8\x39\xdc\x48\x03\x1a\xcd\xaf\x02\xde\x82\x2b\xd2\x39\x90\x01\xdc\x27\xd6\x1a\x08\x5c\x04\xdc\x67\x94\xaf\xb9\x07\x35\xd7\x30\x43\x8a\x3b\x7c\xdb\x07\x14\x9c\x5a\x82\xb9\x2e\x32\x5a\xf9\x8f\x5e\x32\x0b\x46\x74\x50\x14\x64\xb2\x6e\x58\x0d\xf3\x34\x8a\x56\x90\x6a\x36\x8b\x30\x27\x5d\xea\x34\x27\x5f\x3e\x68\x59\x82\x19\xd0\x32\x46\xa0\x30\x81\x08\x32\xdf\xf0\x25\x46\xab\x9c\xeb\x40\x0a\x2c\x22\xfd\x9c\x97\x37\xa0\x53\x7f\x01\x4c\xe7\x85\x3c\x1a\x46\xaf\x63\x66\x39\x95\x2a\xcf\xbb\xe4\xdc\x3c\x31\x95\x73\x55\x98\x34\x63\xa9\xf8\x35\x4c\x73\xd9\x9d\x6b\x60\xe9\x58\x18\x64\x44\xec\x3f\x7b\x29\xc4\x8c\xc4\x80\x54\x64\xfa\xb1\x04\x0a\xd8\x64\x34\x8a\x5f\xbd\x64\xf2\x7a\x99\xa6\xc0\x55\x59\x05\x91\x42\x24\x28\xd4\x46\x2a\xb4\x36\x80\x79\x2a\xfc\xcc\x6f\x70\xb3\xf2\xda\xf6\x9d\x14\x46\xc9\xe8\x2e\x62\x02\xdd\x20\x69\x0f\x87\x1a\xb1\x19\x3e\x77\x3c\x57\x96\x21\x3e\xd0\x6a\x03\x62\x3a\xd2\x6b\xc6\x99\x8d\xbc\xad\x26\x33\xd9\x21\x21\xe1\xd7\xf7\x6d\xed\x4e\x93\x0b\x6d\x98\xf0\xf1\x21\x13\x63\x87\x6c\x71\x95\x60\xe5\x5a\xcf\x48\xa7\xb1\xf2\xef\x44\x3d\x60\x2a\x20\xa0\x86\x49\xfa\x8f\xae\x4c\x27\x15\x9d\xc9\x2a\x17\x06\xc3\x4a\x41\xb0\x12\x06\x72\x61\xfe\xf9\x7d\x8f\xf3\x6e\xde\x3c\x0e\xaf\x1c\x24\xe8\xf3\x79\xde\x8b\x9f\x5f\xf8\x68\xcc\x1a\xf3\x7a\x74\x5c\x43\x62\xbd\x23\xf1\x40\xce\xf4\xbc\x9d\xdc\x09\x83\x3b\x0b\x6b\xbb\x24\xbe\xb5\xaa\x2a\xa9\x73\x59\xa6\xc0\x4e\xb9\x8d\xd4\x9a\x65\x4d\x59\x17\xdd\x29\x8c\x2a\xba\xcd\x67\x69\x7b\x83\x13\xa0\x41\x15\xf3\x75\xcc\x8e\xe0\x6c\xee\xd3\x2e\x70\x59\x72\x53\x4b\xce\x66\x66\xdb\x05\x09\x1d\x9e\xa4\xab\x48\x95\x6f\x83\xa7\x05\xf7\x17\x36\x2b\x56\x5c\x63\x45\xf1\x15\xec\x1c\x61\x1a\x39\x40\xc6\x81\xc1\x51\xb3\x41\xf9\x28\x12\xc9\xc2\x90\xc3\xd3\x48\x17\x8e\x8d\xaf\x75\x36\x43\xd0\xc9\x08\xba\x1d\x5d\x60\x13\xd1\x7a\x98\x5a\x30\xb3\xbe\xca\x18\x66\x9a\x96\x2f\x15\x0e\xcf\x34\x23\x99\x46\x41\x45\xd8\x19\x16\x1f\x2c\x74\xb9\xb3\xf6\x2c\x61\x90\x13\x9d\x54\xd2\x80\xad\x6a\x05\x6d\x3d\x86\x87\xa7\xcf\x4f\x4c\x67\x00\x66\xd5\x3b\xb0\x2d\x04\x6d\x6b\xed\x3e\x3c\x41\xc7\xb5\xd8\x37\x8b\xb8\xb3\x0b\x99\xde\x5d\xfb\xcc\x7e\xd8\xdd\xe8\x9b\xfd\xf0\x87\xfa\x47\x02\x5b\x5a\xa8\xd1\xaf\xbd\x87\xa1\x76\x2e\xb7\x3e\xd4\x5a\xb2\x7b\x53\xfc\xe7\x8a\x13\x47\x44\xb7\xde\x9c\xd6\xcb\xc9\x3a\xe2\x7b\x26\x3c\x0c\xbd\x98\xdd\x8c\x92\xf7\x68\xf4\xfa\x7b\x92\xec\x3b\x05\xee\x7e\xf1\x34\x24\x18\xee\xe6\xa6\xa8\xc1\x15\xa7\x0b\x45\x95\xef\xd1\x14\x9e\xee\x57\x21\x95\x93\x20\xe6\xca\x75\x2f\x09\xbb\xc0\xf9\x87\x73\x1d\x3b\x1c\xf8\x4e\x69\x79\xe8\xd6\xde\xd0\xa3\x75\x78\xfa\x1c\x31\x51\x3f\xc1\xf3\x8e\xa5\x8e\x03\xbc\xc8\x07\xf6\xdf\x79\x03\x1b\xdd\x6b\x45\xe7\x4a\x3e\x92\x48\xad\xf9\x2c\x42\x50\x3c\x5c\x18\x10\xf2\x69\xb0\xa5\x2a\x8d\x20\x87\x67\x97\xf1\x1c\xd6\x6d\x37\x36\xd0\xbd\xfd\xb9\xd7\x1e\x53\xde\x7a\x5f\x0e\xbd\x2e\x6e\xc3\xb5\x7b\xff\x4d\xaa\x3b\x72\x88\x13\xcb\xfc\x15\xa5\x9b\x45\x22\x5a\x89\x6c\xaa\x06\xaa\x17\x62\x5e\x23\x69\x77\x8f\x46\x96\x15\x79\x3a\x4c\xc0\xa2\x74\xf7\x25\xec\xec\xf6\x35\x7a\x10\xfc\x95\x8a\x6a\x5f\x45\x39\x59\x3d\xd4\xf2\x03\x1a\x3b\xf2\xae\xa3\x29\xdf\x6d\x94\xe4\xcf\x9a\x1d\xec\x54\xb3\xeb\xab\xd2\x35\x7a\xd4\x0f\xa4\x03\xa1\x25\x34\x26\x6b\x65\x1f\x56\x38\x9f\x4f\xb4\xdb\xe8\xa5\xea\x47\x15\xed\x6d\xd3\x8c\x50\xe9\xa8\xc8\xa4\x1a\xe6\x7e\x5a\xbe\xa3\x38\xbc\x33\xf4\x2b\xe4\xd3\x4d\xcd\xbe\x86\xb3\xed\xfe\x4c\xaf\xcd\x6c\x2f\xe0\x24\x6e\x9a\x9f\x13\x6d\x87\x9f\x66\x07\xf5\x6b\xeb\x75\x8b\x0f\x16\x7a\x03\xb1\xdd\x19\x29\xc2\x22\x5a\xf9\x09\xdd\xfb\x46\xf9\xaf\x5d\xb4\xfa\xc7\xda\x96\xeb\x46\x6a\xfc\xaf\x41\x25\x58\x74\x29\x7d\xa7\x93\xba\x76\xdf\x71\x2d\x15\xe6\x6d\x0c\x43\xff\x32\xd6\x96\x7f\xcf\x8a\xf8\x39\xf9\x72\xf2\xff\x00\x00\x00\xff\xff\xa8\xa0\x72\x63\xa8\x4b\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/api.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
